##Homework for Algorithm Design 2, week 5
##Randomized method for the Traveling Salesman Problem, with 2 opt optimization
##can get many locally optimal solutions

import math
import random
import time

def readin():
    data = open('G:\\UCHI\Algorithm design 2\week5\data.txt', 'r')
    datalist = list(data)
    temp = datalist.pop(0).split()
    n = int(temp.pop())
    x = []
    y = []
    for i in datalist:
        temp = i.split()
        tempy = float(temp.pop())
        tempx = float(temp.pop())
        x.append(tempx)
        y.append(tempy)
    return(n, x, y)

def distance(x1, y1, x2, y2):
    return(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))

def dmatrix(n, x, y):
    d = [[] for i in range(n)]
    for i in range(n):
        for j in range(n):
            d[i].append(distance(x[i], y[i], x[j], y[j]))
    return(d)

def swap(route, p1, p2):
    i = p1 + 1
    j = p2
    while i < j:
        temp = route[i]
        route[i] = route[j]
        route[j] = temp
        i += 1
        j -= 1
    return(route)

def length(n, route, dm):
    l = 0
    for i in range(n):
        l = l + dm[route[i]][route[i + 1]]
    return(l)

def twoopt(n, route, dm):
    route.append(route[0])
    while True:
        minchange = 0
        for i in range(n - 2):
            if i == 0:
                indi = 1
            else:
                indi = 0
            for j in range(i + 2, n - indi):
                change = dm[route[i]][route[j]] +dm[route[i + 1]][route[j + 1]] - dm[route[i]][route[i + 1]] - dm[route[j]][route[j + 1]]
                if minchange > change:
                    minchange = change
                    mini = i
                    minj = j
        if minchange < 0:
            route = swap(route, mini, minj)
        else:
            break
    return(route)

start = time.clock()
(n, x, y) = readin()
dm = dmatrix(n, x, y)
minl = float('inf')
route = [i for i in range(n)]
for i in range(10):
    route = twoopt(n, route, dm)
    minl = min(minl, length(n, route, dm))
    print(str(minl))
    route.pop()
    random.shuffle(route)
end = time.clock()
print(end-start)

