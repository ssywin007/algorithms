#Homework for Algorithm Design 2, week 3,
#all pairs shortest paths, johnson algorithm

import heapq

def readin1():
    data = open('G:\\UCHI\Algorithm design 2\week4\g1.txt', 'r')
    datalist = list(data)
    temp = datalist.pop(0).split()
    e = int(temp.pop())
    v = int(temp.pop())
    edge = [[] for i in range(v)]
    cost = [[] for i in range(v)]
    for i in range(e):
        temp = datalist[i].split()
        tempc = int(temp.pop())
        tempend = int(temp.pop())
        tempstart = int(temp.pop())
        edge[tempstart - 1].append(tempend)
        cost[tempstart - 1].append(tempc)
    return(e, v, edge, cost)

def readin2():
    data = open('G:\\UCHI\Algorithm design 2\week4\g2.txt', 'r')
    datalist = list(data)
    temp = datalist.pop(0).split()
    e = int(temp.pop())
    v = int(temp.pop())
    edge = [[] for i in range(v)]
    cost = [[] for i in range(v)]
    for i in range(e):
        temp = datalist[i].split()
        tempc = int(temp.pop())
        tempend = int(temp.pop())
        tempstart = int(temp.pop())
        edge[tempstart - 1].append(tempend)
        cost[tempstart - 1].append(tempc)
    return(e, v, edge, cost)

def readin3():
    data = open('G:\\UCHI\Algorithm design 2\week4\g3.txt', 'r')
    datalist = list(data)
    temp = datalist.pop(0).split()
    e = int(temp.pop())
    v = int(temp.pop())
    edge = [[] for i in range(v)]
    cost = [[] for i in range(v)]
    for i in range(e):
        temp = datalist[i].split()
        tempc = int(temp.pop())
        tempend = int(temp.pop())
        tempstart = int(temp.pop())
        edge[tempstart - 1].append(tempend)
        cost[tempstart - 1].append(tempc)
    return(e, v, edge, cost)

def nega(v, cost):
    for i in range(v):
        if min(cost[i]) < 0:
            return(1)
    return(0)

def bellmanford(e, v, edge, cost, s):
    A = [float('inf') for i in range(v)]
    A[s] = 0
    for i in range(v - 1):
        change = 0
        for j in range(v):
            for k in range(len(edge[j])):
                temps = j
                tempe = edge[j][k]
                if A[tempe] > A[temps] + cost[j][k]:
                    A[tempe] = A[temps] + cost[j][k]
                    change += 1
        if change == 0:
            break
    for j in range(v):
        for k in range(len(edge[j])):
            temps = j
            tempe = edge[j][k]
            if A[tempe] > A[temps] + cost[j][k]:
                return([])
    return(A)

def unique_index(L,e):
    return [i for i,j in enumerate(L) if j[1] == e]

def heapreplace(H, pos, new):
    if H[pos][0] <= new:
        return(H)
    else:
        H[pos] = (new, H[pos][1])
        while pos > 0 and H[pos] < H[pos // 2]:
            temp = H[pos]
            H[pos] = H[pos // 2]
            H[pos // 2] = temp
            pos = pos // 2
        return(H)

def dijkstra(e, v, edge, cost, s):
    X = [s]
    A = [float('inf') for i in range(v)]
    A[s] = 0
    H = []
    for i in range(len(edge[s])):
        H.append((cost[s][i], edge[s][i]))
    heapq.heapify(H)
    while len(X) < v and H != []:
        new = heapq.heappop(H)
        X.append(new[1])
        A[new[1] - 1] = new[0]
        for j in range(len(edge[new[1] - 1])):
            if edge[new[1] - 1][j] not in X:
                pos = unique_index(H, edge[new[1] - 1][j])                                                    #新点是否在H中
                if pos == []:
                    heapq.heappush(H, (cost[new[1] - 1][j] + new[0], edge[new[1] - 1][j]))
                else:
                    H = heapreplace(H, pos.pop(), new[0] + cost[new[1] - 1][j])                        #已在H中，考虑是否替换
    return(A)

def johnson(e, v, edge, cost):
    ep = e + 1
    vp = v + 1
    edgep = [[i + 1 for i in range(v)]]
    edgep.extend(edge)
    costp = [[0 for i in range(v)]]
    costp.extend(cost)
    bf = bellmanford(ep, vp, edgep, costp, 0)
    if bf == []:
        return('negative cycles')
    else:
        bf.pop(0)
        for i in range(v):
            for j in range(len(edge[i])):
                cost[i][j] = cost[i][j] + bf[i] - bf[edge[i][j] - 1]
                if cost[i][j] < 0:
                    print('negative error')
        dijk = []
        for i in range(v):
            print(str(i))
            tempd = dijkstra(e, v, edge, cost, i)
            for j in range(len(tempd)):
                tempd[j] = tempd[j] - bf[i] + bf[j]
            dijk.append(tempd)
        return(dijk)

(e1, v1, edge1, cost1) = readin1()
(e2, v2, edge2, cost2) = readin2()
(e3, v3, edge3, cost3) = readin3()
##1 means negative edge costs exist
##0 means no negative edge costs exists
nega1 = nega(v1, cost1)
nega2 = nega(v2, cost2)
nega3 = nega(v3, cost3)
##1 means negative cycle exist
##0 means no negative cycle exists
APSP1 = johnson(e1, v1, edge1, cost1)
print(APSP1)
APSP2 = johnson(e2, v2, edge2, cost2)
print(APSP2)
APSP3 = johnson(e3, v3, edge3, cost3)
## we see graph1 and graph2 have negative cycles

